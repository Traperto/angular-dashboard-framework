{"version":3,"sources":["adf.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","$modal","$timeout","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","unshift","transclude","name","collapsible","editable","maximizable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","editClass","toggleEditMode","modelCopy","$broadcast","deleteDashboard","cancelEditMode","editDashboardDialog","editDashboardScope","$new","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","categories","key","category","recentlyAdded","opts","addWidget","$attr","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","dashboardoptions","$on","preLink","definition","fromJson","isCollapsed","debug","postLink","remove","editScope","openFullScreen","fullScreenScope","size","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'mm.foundation'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        sortable.destroy();\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath, $timeout) {\n    'use strict';\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     */\n    function addNewWidgetToModel(model, widget){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        /**\n         * Scope method allowing action buttons to fire the delete request\n         */\n        $scope.deleteDashboard = function() {\n            $rootScope.$broadcast('adfDashboardDeleteRequested', name, model);\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfTemplatePath + 'dashboard-edit.html',\n            backdrop: 'static'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n\n          addScope.categories = function getCategories() {\n              var categories = {};\n              angular.forEach(widgets, function(widget, key){\n                  var category = 'default';\n                  if (widget.category) {\n                      category = widget.category;\n                  }\n                  if (!categories[category]) {\n                      categories[category] = {};\n                  }\n                  categories[category][key] = widget;\n              });\n\n              return categories;\n          };\n\n          addScope.recentlyAdded = [];\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfTemplatePath + 'widget-add.html',\n            backdrop: 'static'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w);\n\n            addScope.recentlyAdded.push(widget);\n\n            $timeout(function() {\n                addScope.recentlyAdded.shift();\n            }, 1000);\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        dashboardoptions: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse\n          $scope.isCollapsed = false;\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n        $scope.close = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfTemplatePath + 'widget-edit.html',\n            backdrop: 'static'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '='\n      },\n\n      controller: function ($scope) {\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $modal.open(opts);\n          fullScreenScope.closeDialog = function () {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n","angular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=\\\"columns column\\\" ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>Dashboard bearbeiten</h4> <form role=form> <div class=\\\"row dashboard-edit\\\"> <div class=\\\"small-6 columns\\\"> <h5>Titel</h5> <input type=text id=dashboardTitle ng-model=copy.title placeholder=\\\"Titel des Dashboards\\\"> </div> <div class=\\\"small-6 columns\\\"> <h5>Spaltenstruktur</h5> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> <label>{{key}}</label> </div> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div class=row> <div class=\\\"columns small-8\\\"><h1>{{model.title}}</h1></div> <div class=\\\"columns small-4\\\"> <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"Neues Widget hinzufügen\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus\\\"></i> </a> <a href ng-if=editMode title=\\\"Dashboard bearbeiten\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'speichern\\' : \\'Bearbeitungsmodus aktivieren\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-edit\\' : !editMode, \\'fa-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"Änderungen verwerfen\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-repeat adf-flip\\\"></i> </a> </span> </div> </div> <div class=row> <div class=columns> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode> </adf-dashboard-row></div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>Widget hinzufügen</h4> </div> <div class=modal-body> <div class=columns> <accordion close-others=true> <accordion-group ng-repeat=\\\"(category, widgets) in categories\\\" is-open=isopen> <accordion-heading> {{category}}<i class=right ng-class=\\\"{\\'fa fa-chevron-down\\': isopen, \\'fa fa-chevron-right\\': !isopen}\\\"></i> </accordion-heading> <dl class=\\\"dl-horizontal content active\\\" id=#panel{{category}}> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} <i class=\\\"fa fa-spinner fa-spin\\\" ng-show=\\\"recentlyAdded.indexOf(key) > -1\\\"></i> </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </accordion-group> </accordion> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form> <div class=row> <div class=\\\"small-2 columns\\\"> <label for=widgetTitle class=\\\"inline widgetTitle\\\">Titel</label> </div> <div class=\\\"small-10 columns\\\"> <input type=text class=form-control id=widgetTitle ng-model=definition.title> </div> </div> </form> <div ng-if=widget.edit class=widget-settings> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <div class=modal-header> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <h3 class=panel-title ng-class=\\\"editMode ? \\'adf-move\\' : \\'\\'\\\"> {{definition.title}} <span class=pull-right> <a href title=\\\"Daten neu laden\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"fa fa-refresh\\\"></i> </a>  <a href title=\\\"zu klappen\\\" ng-show=\\\"options.collapsible && !isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"fa fa-minus\\\"></i> </a>  <a href title=\\\"auf klappen\\\" ng-show=\\\"options.collapsible && isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"fa fa-plus\\\"></i> </a>  <a href title=konfigurieren ng-click=edit() ng-if=editMode> <i class=\\\"fa fa-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-if=widget.fullScreen> <i class=\\\"fa fa-arrows\\\"></i> </a>  <a href title=löschen ng-click=close() ng-if=editMode> <i class=\\\"fa fa-remove\\\"></i> </a> </span> </h3> </div> <div class=panel-body ng-show=\\\"!options.collapsible || (options.collapsible && !isCollapsed)\\\"> <adf-widget-content model=definition dashboardoptions=options content=widget> </adf-widget-content></div> </div> \");}]);","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'mm.foundation'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '1.0.0');\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        sortable.destroy();\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath, $timeout) {\n    \n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     */\n    function addNewWidgetToModel(model, widget){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '='\n      },\n      controller: function($scope){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        /**\n         * Scope method allowing action buttons to fire the delete request\n         */\n        $scope.deleteDashboard = function() {\n            $rootScope.$broadcast('adfDashboardDeleteRequested', name, model);\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n          var instance = $modal.open({\n            scope: editDashboardScope,\n            templateUrl: adfTemplatePath + 'dashboard-edit.html',\n            backdrop: 'static'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n\n          addScope.categories = function getCategories() {\n              var categories = {};\n              angular.forEach(widgets, function(widget, key){\n                  var category = 'default';\n                  if (widget.category) {\n                      category = widget.category;\n                  }\n                  if (!categories[category]) {\n                      categories[category] = {};\n                  }\n                  categories[category][key] = widget;\n              });\n\n              return categories;\n          };\n\n          addScope.recentlyAdded = [];\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfTemplatePath + 'widget-add.html',\n            backdrop: 'static'\n          };\n          var instance = $modal.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w);\n\n            addScope.recentlyAdded.push(widget);\n\n            $timeout(function() {\n                addScope.recentlyAdded.shift();\n            }, 1000);\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function ($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n    $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url){\n      var parsedUrl = url;\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                       .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0){\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget){\n      var deferred = $q.defer();\n\n      if ( widget.template ){\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl){\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n            .success(function(response){\n              // put response to cache, with unmodified url as key\n              $templateCache.put(widget.templateUrl, response);\n              deferred.resolve(response);\n            })\n            .error(function(){\n              deferred.reject('could not load template');\n            });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs){\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope){\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '=',\n        dashboardoptions: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function(){\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\n\n    function preLink($scope){\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title){\n            definition.title = w.title;\n          }\n\n          // set id for sortable\n          if (!definition.wid){\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse\n          $scope.isCollapsed = false;\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n        $scope.close = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n        };\n\n        // bind reload function\n        $scope.reload = function(){\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfTemplatePath + 'widget-edit.html',\n            backdrop: 'static'\n          };\n\n          var instance = $modal.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload){\n              // reload content after edit dialog is closed\n              $scope.$broadcast('widgetConfigChanged');\n            }\n          };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '='\n      },\n\n      controller: function ($scope) {\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n          };\n\n          var instance = $modal.open(opts);\n          fullScreenScope.closeDialog = function () {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n\n      compile: function compile(){\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=\\\"columns column\\\" ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>Dashboard bearbeiten</h4> <form role=form> <div class=\\\"row dashboard-edit\\\"> <div class=\\\"small-6 columns\\\"> <h5>Titel</h5> <input type=text id=dashboardTitle ng-model=copy.title placeholder=\\\"Titel des Dashboards\\\"> </div> <div class=\\\"small-6 columns\\\"> <h5>Spaltenstruktur</h5> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> <label>{{key}}</label> </div> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div class=row> <div class=\\\"columns small-8\\\"><h1>{{model.title}}</h1></div> <div class=\\\"columns small-4\\\"> <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"Neues Widget hinzufügen\\\" ng-click=addWidgetDialog()> <i class=\\\"fa fa-plus\\\"></i> </a> <a href ng-if=editMode title=\\\"Dashboard bearbeiten\\\" ng-click=editDashboardDialog()> <i class=\\\"fa fa-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'speichern\\' : \\'Bearbeitungsmodus aktivieren\\'}}\\\" ng-click=toggleEditMode()> <i class=fa x-ng-class=\\\"{\\'fa-edit\\' : !editMode, \\'fa-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"Änderungen verwerfen\\\" ng-click=cancelEditMode()> <i class=\\\"fa fa-repeat adf-flip\\\"></i> </a> </span> </div> </div> <div class=row> <div class=columns> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode> </adf-dashboard-row></div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>Widget hinzufügen</h4> </div> <div class=modal-body> <div class=columns> <accordion close-others=true> <accordion-group ng-repeat=\\\"(category, widgets) in categories\\\" is-open=isopen> <accordion-heading> {{category}}<i class=right ng-class=\\\"{\\'fa fa-chevron-down\\': isopen, \\'fa fa-chevron-right\\': !isopen}\\\"></i> </accordion-heading> <dl class=\\\"dl-horizontal content active\\\" id=#panel{{category}}> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} <i class=\\\"fa fa-spinner fa-spin\\\" ng-show=\\\"recentlyAdded.indexOf(key) > -1\\\"></i> </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </accordion-group> </accordion> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form> <div class=row> <div class=\\\"small-2 columns\\\"> <label for=widgetTitle class=\\\"inline widgetTitle\\\">Titel</label> </div> <div class=\\\"small-10 columns\\\"> <input type=text class=form-control id=widgetTitle ng-model=definition.title> </div> </div> </form> <div ng-if=widget.edit class=widget-settings> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<a class=close-reveal-modal ng-click=closeDialog() aria-hidden=true aria-label=Close>&#215;</a> <div class=modal-header> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <h3 class=panel-title ng-class=\\\"editMode ? \\'adf-move\\' : \\'\\'\\\"> {{definition.title}} <span class=pull-right> <a href title=\\\"Daten neu laden\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"fa fa-refresh\\\"></i> </a>  <a href title=\\\"zu klappen\\\" ng-show=\\\"options.collapsible && !isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"fa fa-minus\\\"></i> </a>  <a href title=\\\"auf klappen\\\" ng-show=\\\"options.collapsible && isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"fa fa-plus\\\"></i> </a>  <a href title=konfigurieren ng-click=edit() ng-if=editMode> <i class=\\\"fa fa-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-if=widget.fullScreen> <i class=\\\"fa fa-arrows\\\"></i> </a>  <a href title=löschen ng-click=close() ng-if=editMode> <i class=\\\"fa fa-remove\\\"></i> </a> </span> </h3> </div> <div class=panel-body ng-show=\\\"!options.collapsible || (options.collapsible && !isCollapsed)\\\"> <adf-widget-content model=definition dashboardoptions=options content=widget> </adf-widget-content></div> </div> \");}]);})(window);"],"sourceRoot":"/source/"}